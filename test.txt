Listening on port 5555
http://localhost:5555
Made socket connection
socket.id : vViNV2kFcv1gArn_AAAB
Socket {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  nsp: Namespace {
    _events: [Object: null prototype] { connection: [Function] },
    _eventsCount: 1,
    _maxListeners: undefined,
    sockets: Map { 'vViNV2kFcv1gArn_AAAB' => [Circular] },
    _fns: [],
    _rooms: Set {},
    _flags: {},
    _ids: 0,
    server: Server {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      _nsps: [Map],
      parentNsps: Map {},
      _path: '/socket.io',
      clientPathRegex: /^\/socket\.io\/socket\.io(\.min|\.msgpack\.min)?\.js(\.map)?$/,
      _connectTimeout: 45000,
      _serveClient: true,
      _parser: [Object],
      encoder: Encoder {},
      _adapter: [Function: Adapter],
      sockets: [Circular],
      eio: [Server],
      httpServer: [Server],
      engine: [Server],
      [Symbol(kCapture)]: false
    },
    name: '/',
    adapter: Adapter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      nsp: [Circular],
      rooms: [Map],
      sids: [Map],
      encoder: Encoder {},
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false
  },
  client: Client {
    sockets: Map { 'vViNV2kFcv1gArn_AAAB' => [Circular] },
    nsps: Map { '/' => [Circular] },
    server: Server {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      _nsps: [Map],
      parentNsps: Map {},
      _path: '/socket.io',
      clientPathRegex: /^\/socket\.io\/socket\.io(\.min|\.msgpack\.min)?\.js(\.map)?$/,
      _connectTimeout: 45000,
      _serveClient: true,
      _parser: [Object],
      encoder: Encoder {},
      _adapter: [Function: Adapter],
      sockets: [Namespace],
      eio: [Server],
      httpServer: [Server],
      engine: [Server],
      [Symbol(kCapture)]: false
    },
    conn: Socket {
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      id: 'usyaIKInCtGY6WfoAAAA',
      server: [Server],
      upgrading: false,
      upgraded: false,
      readyState: 'open',
      writeBuffer: [],
      packetsFn: [],
      sentCallbackFn: [],
      cleanupFn: [Array],
      request: [IncomingMessage],
      remoteAddress: '::1',
      checkIntervalTimer: null,
      upgradeTimeoutTimer: null,
      pingTimeoutTimer: Timeout {
        _idleTimeout: 12000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 3092,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(asyncId)]: 20,
        [Symbol(triggerId)]: 8
      },
      pingIntervalTimer: Timeout {
        _idleTimeout: 3000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 3077,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(asyncId)]: 18,
        [Symbol(triggerId)]: 0
      },
      transport: [WebSocket],
      [Symbol(kCapture)]: false
    },
    encoder: Encoder {},
    decoder: Decoder { _callbacks: [Object] },
    id: 'usyaIKInCtGY6WfoAAAA',
    onclose: [Function: bound onclose],
    ondata: [Function: bound ondata],
    onerror: [Function: bound onerror],
    ondecoded: [Function: bound ondecoded],
    connectTimeout: null
  },
  acks: Map {},
  fns: [],
  flags: {},
  _rooms: Set {},
  server: Server {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    _nsps: Map { '/' => [Namespace] },
    parentNsps: Map {},
    _path: '/socket.io',
    clientPathRegex: /^\/socket\.io\/socket\.io(\.min|\.msgpack\.min)?\.js(\.map)?$/,
    _connectTimeout: 45000,
    _serveClient: true,
    _parser: {
      protocol: 5,
      PacketType: [Object],
      Encoder: [Function: Encoder],
      Decoder: [Function: Decoder]
    },
    encoder: Encoder {},
    _adapter: [Function: Adapter],
    sockets: Namespace {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      sockets: [Map],
      _fns: [],
      _rooms: Set {},
      _flags: {},
      _ids: 0,
      server: [Circular],
      name: '/',
      adapter: [Adapter],
      [Symbol(kCapture)]: false
    },
    eio: Server {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      clients: [Object],
      clientsCount: 1,
      opts: [Object],
      ws: [WebSocketServer],
      [Symbol(kCapture)]: false
    },
    httpServer: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 5,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '6::::5555',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 4
    },
    engine: Server {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      clients: [Object],
      clientsCount: 1,
      opts: [Object],
      ws: [WebSocketServer],
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false
  },
  adapter: Adapter {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    nsp: Namespace {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      sockets: [Map],
      _fns: [],
      _rooms: Set {},
      _flags: {},
      _ids: 0,
      server: [Server],
      name: '/',
      adapter: [Circular],
      [Symbol(kCapture)]: false
    },
    rooms: Map { 'vViNV2kFcv1gArn_AAAB' => [Set] },
    sids: Map { 'vViNV2kFcv1gArn_AAAB' => [Set] },
    encoder: Encoder {},
    [Symbol(kCapture)]: false
  },
  id: 'vViNV2kFcv1gArn_AAAB',
  connected: true,
  disconnected: false,
  handshake: {
    headers: {
      host: 'localhost:5555',
      connection: 'Upgrade',
      pragma: 'no-cache',
      'cache-control': 'no-cache',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
      upgrade: 'websocket',
      origin: 'http://localhost:3000',
      'sec-websocket-version': '13',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'en-US,en;q=0.9,fil;q=0.8',
      cookie: 'io=1VXjaK5FabDcaxtHAAAT',
      'sec-websocket-key': 'fAtZC5do5Afv/cfGhVjH7g==',
      'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits'
    },
    time: 'Sun Nov 15 2020 12:50:32 GMT+0800 (Singapore Standard Time)',
    address: '::1',
    xdomain: true,
    secure: false,
    issued: 1605415832501,
    url: '/socket.io/?EIO=4&transport=websocket',
    query: [Object: null prototype] { EIO: '4', transport: 'websocket' },
    auth: {}
  },
  [Symbol(kCapture)]: false
}
_login
socket.id : vViNV2kFcv1gArn_AAAB
active: 1
